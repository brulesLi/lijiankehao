{"name":"oc的细节  copy  block","tagline":"我的第一个仓库","body":"\r\n#copy  mutableCopy\r\n\r\n什么是copy\r\nCopy的字面意思是“复制”、“拷贝”，是一个产生副本的过程\r\n常见的复制有：文件复制\r\n作用：利用一个源文件产生一个副本文件\r\n特点：\r\n修改源文件的内容，不会影响副本文件\r\n修改副本文件的内容，不会影响源文件\r\nOC中的copy\r\n作用：利用一个源对象产生一个副本对象\r\n特点：\r\n修改源对象的属性和行为，不会影响副本对象\r\n修改副本对象的属性和行为，不会影响源对象\r\n\r\n\r\n\r\n\r\n\r\n如何使用copy功能\r\n一个对象可以调用copy或mutableCopy方法来创建一个副本对象\r\ncopy : 创建的是不可变副本(如NSString、NSArray、NSDictionary)\r\nmutableCopy :创建的是可变副本(如NSMutableString、NSMutableArray、NSMutableDictionary)\r\n\r\n使用copy功能的前提\r\ncopy : 需要遵守NSCopying协议，实现copyWithZone:方法\r\n@protocol NSCopying\r\n\r\n- (id)copyWithZone:(NSZone *)zone;\r\n\r\n@end\r\n\r\n\r\nmutableCopy : 需要遵守NSMutableCopying协议，实现mutableCopyWithZone:方法\r\n@protocol NSMutableCopying\r\n\r\n- (id)mutableCopyWithZone:(NSZone *)zone;\r\n\r\n@end \r\n\r\n\r\n\r\n\r\n\r\n深复制（深拷贝，内容拷贝，deep copy）\r\n源对象和副本对象是不同的两个对象\r\n源对象引用计数器不变, 副本对象计数器为1（因为是新产生的）\r\n本质是：产生了新的对象\r\n浅复制（浅拷贝，指针拷贝，shallow copy）\r\n源对象和副本对象是同一个对象\r\n源对象（副本对象）引用计数器 + 1, 相当于做一次retain操作\r\n本质是：没有产生新的对象\r\n\r\n深复制（深拷贝，内容拷贝，deep copy）\r\n源对象和副本对象是不同的两个对象\r\n源对象引用计数器不变, 副本对象计数器为1（因为是新产生的）\r\n本质是：产生了新的对象\r\n浅复制（浅拷贝，指针拷贝，shallow copy）\r\n源对象和副本对象是同一个对象\r\n源对象（副本对象）引用计数器 + 1, 相当于做一次retain操作\r\n本质是：没有产生新的对象\r\n\r\n##Block\r\n\r\nBlock的定义格式\r\n返回值类型 (^block变量名)(形参列表) = ^(形参列表) {\r\n\r\n        \r\n\r\n};\r\n\r\n\r\n调用Block保存的代码\r\nblock变量名(实参);\r\n\r\n\r\n使用typedef定义Block类型\r\ntypedef 返回值类型 (^block类型名称)(形参列表);\r\n\r\n\r\n\r\n默认情况下, Block内部不能修改外面的局部变量\r\nBlock内部可以修改使用__block修饰的局部变量\r\n\r\n\r\n.h\r\ntypedef void(^OperationBlock)();\r\n\r\n@property(nonatomic,copy)OperationBlock    operationBlock;//最好用copy  \r\n\r\n\r\n\r\n\r\n\r\n.m \r\n    /**\r\n     *block  最最关键是 一定先定义后  才能够调用（一定注意权限全局变量Block才能全局调用）\r\n     *\r\n     */\r\n    \r\n    \r\n    /**\r\n     *头部定义\r\n     */\r\n    typedef void(^Test)();\r\n    \r\n    \r\n    typedef void (^TestPar)(NSString*);\r\n    \r\n    \r\n    \r\n    typedef NSString* (^TeturnAndPar)(NSString*,NSString*);\r\n    \r\n    \r\n    /**\r\n     *定义\r\n     */\r\n\r\n\r\n   //习惯很重要虽然没有参数  在定义赋值右端还是写上()    因为结构上可以让你更有清楚思维\r\n\r\n\r\n\r\n\r\n\r\n   Test    test=^(){\r\n    };\r\n    TestPar   testparameter=^(NSString* par){\r\n    };\r\n    \r\n    \r\n\r\n    /**\r\n     *有返回值在定义赋值 也要写返回值\r\n     *\r\n     */\r\n    \r\n    \r\n    TeturnAndPar   testAndPar=^(NSString *parter,NSString *parter2){\r\n        return parter;\r\n    };\r\n\r\n\r\n    /**\r\n     *调用\r\n     *\r\n     */\r\n    test();\r\n    testparameter(@\"努力奋斗\");\r\n    testAndPar(@\"奋斗\",@\"努力\");\r\n    \r\n    \r\n    /**\r\n     *block的定义\r\n     */\r\n    //无返回值 无参数\r\n    void(^testBlock)()=^{\r\n        LJKLOG(@\"cao  block\");\r\n    };\r\n    \r\n    //无返回值 有参数\r\n    void(^testParameterBlock)(NSString*,NSString*)=^(NSString *parameter1,NSString *parameter){\r\n        [parameter  stringByAppendingString:parameter1];\r\n    };\r\n    \r\n    \r\n    //有返回值 有参数\r\n    \r\n    NSString*(^testReturnAnpar)(NSString*,NSString*)=^(NSString *par1,NSString *par2){\r\n        return    [par1  stringByAppendingString:par2];\r\n    };\r\n    \r\n    \r\n    \r\n    /**\r\n     *block的调用\r\n     */\r\n    //无返回值 无参数\r\n     testBlock();\r\n    \r\n    \r\n    //无返回值 有参数\r\n    testParameterBlock(@\"cao\",@\"nimei\");\r\n    \r\n    \r\n    \r\n    //有返回值 有参数\r\n    NSString  *stringpp=testReturnAnpar(@\"nima\",@\"SB\");\r\n    LJKLOG(@\"%@\",stringpp);\r\n    \r\n    \r\n","google":"oc的细节  copy  block","note":"Don't delete this file! It's used internally to help with page regeneration."}